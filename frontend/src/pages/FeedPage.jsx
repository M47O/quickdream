import { useEffect, useState } from 'react'
import apiUrl from '../api'
import SelectedPostDialog from '../components/SelectedPostDialog'
import { IconButton } from '@mui/material';
import PublicIcon from '@mui/icons-material/Public';
import PeopleIcon from '@mui/icons-material/People';
import FavoriteIcon from '@mui/icons-material/Favorite';
import BookmarkIcon from '@mui/icons-material/Bookmark';

import './css/FeedPage.css'
import './css/PostGrid.css'

export default function FeedPage({ loggedInUser }) {
    const [allPosts, setAllPosts] = useState([])
    const [followedPosts, setFollowedPosts] = useState([])
    const [likedPosts, setLikedPosts] = useState([])
    const [bookmarkedPosts, setBookmarkedPosts] = useState([])
    const [selectedPost, setSelectedPost] = useState(null)
    const [showSelectedPost, setShowSelectedPost] = useState(false)
    const [selectedFeed, setSelectedFeed] = useState("all")

    console.log(allPosts[0])

    async function fetchPosts() {
        try {
            const response = await fetch(`${apiUrl}/api/post/all`);
            const allPostsData = await response.json();
            setAllPosts(allPostsData)

        } catch (err) {
            console.error(err);
        }
    }

    useEffect(() => {
        fetchPosts();
    }, []);

    useEffect(() => {
        if (loggedInUser) {
            setLikedPosts(allPosts.filter(post => post.likedBy.includes(loggedInUser.id)));
            setBookmarkedPosts(allPosts.filter(post => post.bookmarkedBy.includes(loggedInUser.id)));
            setFollowedPosts(allPosts.filter(post => loggedInUser.followedUsers.includes(post.authorId)))
        }
    }, [allPosts]);

    function selectFeed(feed) {
        setSelectedFeed(feed)
    }

    function updateBookmarkedPosts(updatedPosts) {
        setBookmarkedPosts(updatedPosts)
    }

    function updateLikedPosts(updatedPosts) {
        setLikedPosts(updatedPosts)
    }

    function updateAllPosts(updatedPosts) {
        setAllPosts(updatedPosts)
    }

    return (
        <div className="feed">
            {loggedInUser && <div className="feed__selectionContainer">
                <span
                    title="All Posts"
                    className={selectedFeed === "all" ? "feed__selection feed__selection--selected" : "feed__selection"}
                    onClick={() => selectFeed("all")}
                >
                    <PublicIcon />
                </span>
                <span
                    title="Posts from Users You Follow"
                    className={selectedFeed === "followed" ? "feed__selection feed__selection--selected" : "feed__selection"}
                    onClick={() => selectFeed("followed")}
                >
                    <PeopleIcon />
                </span>
                <span
                    title="Liked Posts"
                    className={selectedFeed === "liked" ? "feed__selection feed__selection--selected" : "feed__selection"}
                    onClick={() => selectFeed("liked")}
                >
                    <FavoriteIcon />
                </span>
                <span
                    title="Bookmarked Posts"
                    className={selectedFeed === "bookmarked" ? "feed__selection feed__selection--selected" : "feed__selection"}
                    onClick={() => selectFeed("bookmarked")}
                >
                    <BookmarkIcon />
                </span>
            </div>}
            <section className="feedPosts">
                {!loggedInUser && <p style={{ marginBottom: '10px', textAlign: 'center' }}>Log in to interact with posts <br /> and view your personalized feed</p>}
                <div className="postGrid postGrid--feed">

                    {/* Show all posts */}
                    {selectedFeed === "all" && allPosts.map(post => (
                        <div key={post._id}
                            className={loggedInUser ? "postGrid__imageContainer" : "postGrid__imageContainer postGrid__imageContainer--defaultCursor"}
                            onClick={() => {
                                if (loggedInUser) {
                                    setSelectedPost(post)
                                    setShowSelectedPost(true)
                                }
                            }}
                        >
                            <img
                                className="postGrid__image"
                                src={post.image}
                                alt={`Image generated by AI with the prompt ${post.prompt}`}
                            />
                            <div className="postGrid__titleContainer">
                                <p className="postGrid__imageTitle">{post.title.length > 26 ? post.title.slice(0, 20) + "..." : post.title}</p>
                            </div>
                        </div>
                    ))}
                    {/* Show liked posts */}
                    {selectedFeed === "liked" && (likedPosts.length ? likedPosts.map(post => (
                        <div key={post._id}
                            className={loggedInUser ? "postGrid__imageContainer" : "postGrid__imageContainer postGrid__imageContainer--defaultCursor"}
                            onClick={() => {
                                if (loggedInUser) {
                                    setSelectedPost(post)
                                    setShowSelectedPost(true)
                                }
                            }}
                        >
                            <img
                                className="postGrid__image"
                                src={post.image}
                                alt={`Image generated by AI with the prompt ${post.prompt}`}
                            />
                            <div className="postGrid__titleContainer">
                                <p className="postGrid__imageTitle">{post.title.length > 26 ? post.title.slice(0, 20) + "..." : post.title}</p>
                            </div>
                        </div>
                    )) : <p className="postGrid__noPostDisclaimer">You haven't liked any posts! <br /> Like a post and it will appear here.</p>)}
                    {/* Show bookmarked posts */}
                    {selectedFeed === "bookmarked" && (bookmarkedPosts.length ? bookmarkedPosts.map(post => (
                        <div key={post._id}
                            className={loggedInUser ? "postGrid__imageContainer" : "postGrid__imageContainer postGrid__imageContainer--defaultCursor"}
                            onClick={() => {
                                if (loggedInUser) {
                                    setSelectedPost(post)
                                    setShowSelectedPost(true)
                                }
                            }}
                        >
                            <img
                                className="postGrid__image"
                                src={post.image}
                                alt={`Image generated by AI with the prompt ${post.prompt}`}
                            />
                            <div className="postGrid__titleContainer">
                                <p className="postGrid__imageTitle">{post.title.length > 26 ? post.title.slice(0, 20) + "..." : post.title}</p>
                            </div>
                        </div>
                    )) : <p className="postGrid__noPostDisclaimer">You haven't bookmarked any posts! <br /> Bookmark a post and it will appear here.</p>)}
                    {/* Show followed posts */}
                    {selectedFeed === "followed" && (followedPosts.length ? followedPosts.map(post => (
                        <div key={post._id}
                            className={loggedInUser ? "postGrid__imageContainer" : "postGrid__imageContainer postGrid__imageContainer--defaultCursor"}
                            onClick={() => {
                                if (loggedInUser) {
                                    setSelectedPost(post)
                                    setShowSelectedPost(true)
                                }
                            }}
                        >
                            <img
                                className="postGrid__image"
                                src={post.image}
                                alt={`Image generated by AI with the prompt ${post.prompt}`}
                            />
                            <div className="postGrid__titleContainer">
                                <p className="postGrid__imageTitle">{post.title.length > 26 ? post.title.slice(0, 20) + "..." : post.title}</p>
                            </div>
                        </div>
                    )) : <p className="postGrid__noPostDisclaimer">You haven't followed anyone! <br /> Visit someone's profile by clicking a post, then clicking their username, and finally clicking the "follow user" button.</p>)}
                </div>


                <SelectedPostDialog
                    close={() => {
                        setShowSelectedPost(false)
                        setSelectedPost(null)
                    }}
                    post={selectedPost}
                    isOpen={showSelectedPost}
                    author={{ id: selectedPost?.authorId, username: selectedPost?.authorUsername }}
                    loggedInUser={loggedInUser}
                    displayedPosts={
                        selectedFeed === "all" ? allPosts : selectedFeed === "followed" ? followedPosts : selectedFeed === "liked" ? likedPosts : selectedFeed === "bookmarked" ? bookmarkedPosts : null
                    }
                    setDisplayedPosts={setAllPosts}
                    updateBookmarkedPosts={updateBookmarkedPosts}
                    bookmarkedPosts={bookmarkedPosts}
                    updateLikedPosts={updateLikedPosts}
                    likedPosts={likedPosts}
                    updateAllPosts={updateAllPosts}
                    allPosts={allPosts}
                />
            </section >
        </div >

    )
}