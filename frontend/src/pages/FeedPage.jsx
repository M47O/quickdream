import { useEffect, useState } from 'react'
import apiUrl from '../api'
import PostForm from '../components/PostForm'
import PreviewPostDialog from '../components/PreviewPostDialog'
import SelectedPostDialog from '../components/SelectedPostDialog'
import { IconButton } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import './css/FeedPage.css'
import './css/PostGrid.css'

export default function ProfilePage({ loggedInUser }) {
    const [feedPosts, setFeedPosts] = useState([])
    const [selectedPost, setSelectedPost] = useState(null)
    const [showSelectedPost, setShowSelectedPost] = useState(false)

    async function fetchPosts() {
        try {
            const response = await fetch(`${apiUrl}/api/post/all`);
            const feedPostsData = await response.json();
            setFeedPosts(feedPostsData)

        } catch (err) {
            console.error(err);
        }
    }

    useEffect(() => {
        fetchPosts();
    }, []);

    return (
        <div className="feed">
            <section className="feedPosts">
                {!loggedInUser && <p style={{ marginBottom: '10px', textAlign: 'center' }}>Log in to interact with posts <br /> and view your personalized feed</p>}
                <div className="postGrid postGrid--feed">
                    {feedPosts.map(post => (
                        <div key={post._id}
                            className={loggedInUser ? "postGrid__imageContainer" : "postGrid__imageContainer postGrid__imageContainer--defaultCursor"}
                            onClick={() => {
                                if (loggedInUser) {
                                    setSelectedPost(post)
                                    setShowSelectedPost(true)
                                }
                            }}
                        >
                            <img
                                className="postGrid__image"
                                src={post.image}
                                alt={`Image generated by AI with the prompt ${post.prompt}`}
                            />
                            <div className="postGrid__titleContainer">
                                <p className="postGrid__imageTitle">{post.title.length > 26 ? post.title.slice(0, 20) + "..." : post.title}</p>
                            </div>
                        </div>
                    ))}
                </div>

                <SelectedPostDialog
                    close={() => setShowSelectedPost(false)}
                    post={selectedPost}
                    isOpen={showSelectedPost}
                    author={{ id: selectedPost?.authorId, username: selectedPost?.authorUsername }}
                    loggedInUser={loggedInUser}
                    displayedPosts={feedPosts}
                    setPosts={setFeedPosts}
                />
            </section >
        </div >

    )
}